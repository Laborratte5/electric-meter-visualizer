option task = {{ '{name: "' + task_name + '", every: ' + every.seconds | string + 's, offset: ' + task_offset.seconds | string + 's}' }}

{% include "custom_aggregate_window.j2" %}

data = from(bucketID: "{{source_bucket.identifier}}")
    |> range(start: -task.every)
    {{filter}}
    |> group(columns: ["_measurement"]) {# Creates a separate table for each _measurement #}

{% for aggregate_function in aggregate_functions %}
{{aggregate_function_mapping[aggregate_function]}} = data |> customAggregateWindow(every: _aggregate_window, fn: {{aggregate_function_mapping[aggregate_function]}})
    |> map(fn: (r) => ({{ '{r with _value: float(v: r._value)}' }}))
    |> set(key: "_field", value: "{{aggregate_function_mapping[aggregate_function]}}")
    |> set(key: "aggregate_function", value: "{{aggregate_function.name}}")
{% endfor %}

union(tables: [{{ aggregate_function_names | join(',') }}])
    |> to(bucketID: "{{destination_bucket.identifier}}")
